/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestIndexRouteImport } from './routes/test/index'
import { Route as ProtectedPanelRouteRouteImport } from './routes/_protected/panel/route'
import { Route as AuthedLoginIndexRouteImport } from './routes/_authed/login/index'
import { Route as ApiTrpcSplatRouteImport } from './routes/api/trpc/$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as ProtectedPanelWeaponsIndexRouteImport } from './routes/_protected/panel/weapons/index'
import { Route as ProtectedPanelResonatorsIndexRouteImport } from './routes/_protected/panel/resonators/index'
import { Route as ProtectedPanelMaterialsIndexRouteImport } from './routes/_protected/panel/materials/index'
import { Route as ProtectedPanelHomeIndexRouteImport } from './routes/_protected/panel/home/index'
import { Route as ProtectedPanelWeaponsNewIndexRouteImport } from './routes/_protected/panel/weapons/new/index'
import { Route as ProtectedPanelWeaponsIdIndexRouteImport } from './routes/_protected/panel/weapons/$id/index'
import { Route as ProtectedPanelResonatorsNewIndexRouteImport } from './routes/_protected/panel/resonators/new/index'
import { Route as ProtectedPanelResonatorsIdIndexRouteImport } from './routes/_protected/panel/resonators/$id/index'
import { Route as ProtectedPanelMaterialsNewIndexRouteImport } from './routes/_protected/panel/materials/new/index'
import { Route as ProtectedPanelMaterialsIdIndexRouteImport } from './routes/_protected/panel/materials/$id/index'

const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestIndexRoute = TestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedPanelRouteRoute = ProtectedPanelRouteRouteImport.update({
  id: '/panel',
  path: '/panel',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const AuthedLoginIndexRoute = AuthedLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedPanelWeaponsIndexRoute =
  ProtectedPanelWeaponsIndexRouteImport.update({
    id: '/weapons/',
    path: '/weapons/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelResonatorsIndexRoute =
  ProtectedPanelResonatorsIndexRouteImport.update({
    id: '/resonators/',
    path: '/resonators/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelMaterialsIndexRoute =
  ProtectedPanelMaterialsIndexRouteImport.update({
    id: '/materials/',
    path: '/materials/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelHomeIndexRoute = ProtectedPanelHomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => ProtectedPanelRouteRoute,
} as any)
const ProtectedPanelWeaponsNewIndexRoute =
  ProtectedPanelWeaponsNewIndexRouteImport.update({
    id: '/weapons/new/',
    path: '/weapons/new/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelWeaponsIdIndexRoute =
  ProtectedPanelWeaponsIdIndexRouteImport.update({
    id: '/weapons/$id/',
    path: '/weapons/$id/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelResonatorsNewIndexRoute =
  ProtectedPanelResonatorsNewIndexRouteImport.update({
    id: '/resonators/new/',
    path: '/resonators/new/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelResonatorsIdIndexRoute =
  ProtectedPanelResonatorsIdIndexRouteImport.update({
    id: '/resonators/$id/',
    path: '/resonators/$id/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelMaterialsNewIndexRoute =
  ProtectedPanelMaterialsNewIndexRouteImport.update({
    id: '/materials/new/',
    path: '/materials/new/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)
const ProtectedPanelMaterialsIdIndexRoute =
  ProtectedPanelMaterialsIdIndexRouteImport.update({
    id: '/materials/$id/',
    path: '/materials/$id/',
    getParentRoute: () => ProtectedPanelRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/panel': typeof ProtectedPanelRouteRouteWithChildren
  '/test': typeof TestIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/login': typeof AuthedLoginIndexRoute
  '/panel/home': typeof ProtectedPanelHomeIndexRoute
  '/panel/materials': typeof ProtectedPanelMaterialsIndexRoute
  '/panel/resonators': typeof ProtectedPanelResonatorsIndexRoute
  '/panel/weapons': typeof ProtectedPanelWeaponsIndexRoute
  '/panel/materials/$id': typeof ProtectedPanelMaterialsIdIndexRoute
  '/panel/materials/new': typeof ProtectedPanelMaterialsNewIndexRoute
  '/panel/resonators/$id': typeof ProtectedPanelResonatorsIdIndexRoute
  '/panel/resonators/new': typeof ProtectedPanelResonatorsNewIndexRoute
  '/panel/weapons/$id': typeof ProtectedPanelWeaponsIdIndexRoute
  '/panel/weapons/new': typeof ProtectedPanelWeaponsNewIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/panel': typeof ProtectedPanelRouteRouteWithChildren
  '/test': typeof TestIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/login': typeof AuthedLoginIndexRoute
  '/panel/home': typeof ProtectedPanelHomeIndexRoute
  '/panel/materials': typeof ProtectedPanelMaterialsIndexRoute
  '/panel/resonators': typeof ProtectedPanelResonatorsIndexRoute
  '/panel/weapons': typeof ProtectedPanelWeaponsIndexRoute
  '/panel/materials/$id': typeof ProtectedPanelMaterialsIdIndexRoute
  '/panel/materials/new': typeof ProtectedPanelMaterialsNewIndexRoute
  '/panel/resonators/$id': typeof ProtectedPanelResonatorsIdIndexRoute
  '/panel/resonators/new': typeof ProtectedPanelResonatorsNewIndexRoute
  '/panel/weapons/$id': typeof ProtectedPanelWeaponsIdIndexRoute
  '/panel/weapons/new': typeof ProtectedPanelWeaponsNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/panel': typeof ProtectedPanelRouteRouteWithChildren
  '/test/': typeof TestIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/_authed/login/': typeof AuthedLoginIndexRoute
  '/_protected/panel/home/': typeof ProtectedPanelHomeIndexRoute
  '/_protected/panel/materials/': typeof ProtectedPanelMaterialsIndexRoute
  '/_protected/panel/resonators/': typeof ProtectedPanelResonatorsIndexRoute
  '/_protected/panel/weapons/': typeof ProtectedPanelWeaponsIndexRoute
  '/_protected/panel/materials/$id/': typeof ProtectedPanelMaterialsIdIndexRoute
  '/_protected/panel/materials/new/': typeof ProtectedPanelMaterialsNewIndexRoute
  '/_protected/panel/resonators/$id/': typeof ProtectedPanelResonatorsIdIndexRoute
  '/_protected/panel/resonators/new/': typeof ProtectedPanelResonatorsNewIndexRoute
  '/_protected/panel/weapons/$id/': typeof ProtectedPanelWeaponsIdIndexRoute
  '/_protected/panel/weapons/new/': typeof ProtectedPanelWeaponsNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/panel'
    | '/test'
    | '/api/auth/$'
    | '/api/trpc/$'
    | '/login'
    | '/panel/home'
    | '/panel/materials'
    | '/panel/resonators'
    | '/panel/weapons'
    | '/panel/materials/$id'
    | '/panel/materials/new'
    | '/panel/resonators/$id'
    | '/panel/resonators/new'
    | '/panel/weapons/$id'
    | '/panel/weapons/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/panel'
    | '/test'
    | '/api/auth/$'
    | '/api/trpc/$'
    | '/login'
    | '/panel/home'
    | '/panel/materials'
    | '/panel/resonators'
    | '/panel/weapons'
    | '/panel/materials/$id'
    | '/panel/materials/new'
    | '/panel/resonators/$id'
    | '/panel/resonators/new'
    | '/panel/weapons/$id'
    | '/panel/weapons/new'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_protected'
    | '/_protected/panel'
    | '/test/'
    | '/api/auth/$'
    | '/api/trpc/$'
    | '/_authed/login/'
    | '/_protected/panel/home/'
    | '/_protected/panel/materials/'
    | '/_protected/panel/resonators/'
    | '/_protected/panel/weapons/'
    | '/_protected/panel/materials/$id/'
    | '/_protected/panel/materials/new/'
    | '/_protected/panel/resonators/$id/'
    | '/_protected/panel/resonators/new/'
    | '/_protected/panel/weapons/$id/'
    | '/_protected/panel/weapons/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  TestIndexRoute: typeof TestIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/panel': {
      id: '/_protected/panel'
      path: '/panel'
      fullPath: '/panel'
      preLoaderRoute: typeof ProtectedPanelRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_authed/login/': {
      id: '/_authed/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthedLoginIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/panel/weapons/': {
      id: '/_protected/panel/weapons/'
      path: '/weapons'
      fullPath: '/panel/weapons'
      preLoaderRoute: typeof ProtectedPanelWeaponsIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/resonators/': {
      id: '/_protected/panel/resonators/'
      path: '/resonators'
      fullPath: '/panel/resonators'
      preLoaderRoute: typeof ProtectedPanelResonatorsIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/materials/': {
      id: '/_protected/panel/materials/'
      path: '/materials'
      fullPath: '/panel/materials'
      preLoaderRoute: typeof ProtectedPanelMaterialsIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/home/': {
      id: '/_protected/panel/home/'
      path: '/home'
      fullPath: '/panel/home'
      preLoaderRoute: typeof ProtectedPanelHomeIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/weapons/new/': {
      id: '/_protected/panel/weapons/new/'
      path: '/weapons/new'
      fullPath: '/panel/weapons/new'
      preLoaderRoute: typeof ProtectedPanelWeaponsNewIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/weapons/$id/': {
      id: '/_protected/panel/weapons/$id/'
      path: '/weapons/$id'
      fullPath: '/panel/weapons/$id'
      preLoaderRoute: typeof ProtectedPanelWeaponsIdIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/resonators/new/': {
      id: '/_protected/panel/resonators/new/'
      path: '/resonators/new'
      fullPath: '/panel/resonators/new'
      preLoaderRoute: typeof ProtectedPanelResonatorsNewIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/resonators/$id/': {
      id: '/_protected/panel/resonators/$id/'
      path: '/resonators/$id'
      fullPath: '/panel/resonators/$id'
      preLoaderRoute: typeof ProtectedPanelResonatorsIdIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/materials/new/': {
      id: '/_protected/panel/materials/new/'
      path: '/materials/new'
      fullPath: '/panel/materials/new'
      preLoaderRoute: typeof ProtectedPanelMaterialsNewIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
    '/_protected/panel/materials/$id/': {
      id: '/_protected/panel/materials/$id/'
      path: '/materials/$id'
      fullPath: '/panel/materials/$id'
      preLoaderRoute: typeof ProtectedPanelMaterialsIdIndexRouteImport
      parentRoute: typeof ProtectedPanelRouteRoute
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedLoginIndexRoute: typeof AuthedLoginIndexRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedLoginIndexRoute: AuthedLoginIndexRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface ProtectedPanelRouteRouteChildren {
  ProtectedPanelHomeIndexRoute: typeof ProtectedPanelHomeIndexRoute
  ProtectedPanelMaterialsIndexRoute: typeof ProtectedPanelMaterialsIndexRoute
  ProtectedPanelResonatorsIndexRoute: typeof ProtectedPanelResonatorsIndexRoute
  ProtectedPanelWeaponsIndexRoute: typeof ProtectedPanelWeaponsIndexRoute
  ProtectedPanelMaterialsIdIndexRoute: typeof ProtectedPanelMaterialsIdIndexRoute
  ProtectedPanelMaterialsNewIndexRoute: typeof ProtectedPanelMaterialsNewIndexRoute
  ProtectedPanelResonatorsIdIndexRoute: typeof ProtectedPanelResonatorsIdIndexRoute
  ProtectedPanelResonatorsNewIndexRoute: typeof ProtectedPanelResonatorsNewIndexRoute
  ProtectedPanelWeaponsIdIndexRoute: typeof ProtectedPanelWeaponsIdIndexRoute
  ProtectedPanelWeaponsNewIndexRoute: typeof ProtectedPanelWeaponsNewIndexRoute
}

const ProtectedPanelRouteRouteChildren: ProtectedPanelRouteRouteChildren = {
  ProtectedPanelHomeIndexRoute: ProtectedPanelHomeIndexRoute,
  ProtectedPanelMaterialsIndexRoute: ProtectedPanelMaterialsIndexRoute,
  ProtectedPanelResonatorsIndexRoute: ProtectedPanelResonatorsIndexRoute,
  ProtectedPanelWeaponsIndexRoute: ProtectedPanelWeaponsIndexRoute,
  ProtectedPanelMaterialsIdIndexRoute: ProtectedPanelMaterialsIdIndexRoute,
  ProtectedPanelMaterialsNewIndexRoute: ProtectedPanelMaterialsNewIndexRoute,
  ProtectedPanelResonatorsIdIndexRoute: ProtectedPanelResonatorsIdIndexRoute,
  ProtectedPanelResonatorsNewIndexRoute: ProtectedPanelResonatorsNewIndexRoute,
  ProtectedPanelWeaponsIdIndexRoute: ProtectedPanelWeaponsIdIndexRoute,
  ProtectedPanelWeaponsNewIndexRoute: ProtectedPanelWeaponsNewIndexRoute,
}

const ProtectedPanelRouteRouteWithChildren =
  ProtectedPanelRouteRoute._addFileChildren(ProtectedPanelRouteRouteChildren)

interface ProtectedRouteRouteChildren {
  ProtectedPanelRouteRoute: typeof ProtectedPanelRouteRouteWithChildren
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedPanelRouteRoute: ProtectedPanelRouteRouteWithChildren,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  TestIndexRoute: TestIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
